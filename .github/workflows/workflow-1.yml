name: Oussama CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    paths-ignore:
      - "README.md"
    branches: ["main"]

  workflow_dispatch:
    inputs:
      image_name:
        description: "Docker image name"
        required: false
        default: ""
      image_tag:
        description: "Tag for the Docker image"
        required: false
        default: "latest"
      deploy_env:
        description: "Deployment environment"
        required: false
        default: ""

env:
  COMMIT_HASH: ${{ github.sha }}
  IMAGE_NAME: ${{ (github.event.inputs.image_name || vars.IMAGE_NAME) }}
  IMAGE_TAG: ${{ github.event.inputs.image_tag || 'latest' }}

jobs:
  build-test-and-push:
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Display GitHub Context Information
        run: |
          echo "Repository: ${{ github.repository }}, Actor: ${{ github.actor }}, Branch: ${{ github.ref_name }}"

      - name: Display Runner Information
        run: |
          echo "Running on OS: ${{ runner.os }} with ${{ runner.arch }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert IMAGE_NAME to lowercase
        run: echo "IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          echo "Building Docker image with name: ${{ env.IMAGE_NAME }} and tag: ${{ env.IMAGE_TAG }}"

          # Build the Docker image with commit hash tag
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_HASH }} .

      - name: Test Docker Image
        run: |
          echo "Running tests on Docker image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_HASH }}"
          docker run -d --name test_container -p 3001:3001 ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_HASH }}
          docker ps | grep test_container

          # Checks to validate the container
          sleep 20
          docker logs test_container
          curl http://localhost:3001

          docker stop test_container
          docker rm test_container

      - name: Push Docker Image to Container Registry
        run: |
          DOCKERHUB_IMAGE=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          GHCR_IMAGE=ghcr.io/$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')/${{ env.IMAGE_NAME }}

          echo "Pushing Docker image: $DOCKERHUB_IMAGE:${{ env.COMMIT_HASH }}"

          # Push the Docker image with commit hash tag
          docker push $DOCKERHUB_IMAGE:${{ env.COMMIT_HASH }}

          # Build and push with specified or default tag
          docker build -t $DOCKERHUB_IMAGE:${{ env.IMAGE_TAG }} .
          docker push $DOCKERHUB_IMAGE:${{ env.IMAGE_TAG }}

          # Build and Push the Docker image to GitHub Container Registry
          docker build -t $GHCR_IMAGE:${{ env.COMMIT_HASH }} .
          docker push $GHCR_IMAGE:${{ env.COMMIT_HASH }}

  dev-deploy:
    needs: build-test-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Install AWS CLI and AWS IAM Authenticator
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

          curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/aws-iam-authenticator
          chmod +x ./aws-iam-authenticator
          sudo mv aws-iam-authenticator /usr/local/bin/

      - name: Set Kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Fetch Kubernetes Cluster Details
        run: |
          kubectl version
          kubectl get nodes

      - name: Saving Ingress Controller Hostname as a GitHub Environment Variable
        run: |
          echo "INGRESS_HOSTNAME=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> $GITHUB_ENV

      - name: Replace Tokens in Kubernetes manifest
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: "_{_"
          tokenSuffix: "_}_"
          files: "Kubernetes/development/*.yaml"
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_HASH }}
          DEPLOY_ENV: development
          INGRESS_HOSTNAME: ${{ env.INGRESS_HOSTNAME }}

      - name: Check the Kubernetes manifest files
        run: |
          cat Kubernetes/development/*.yaml

      # - name : Create MongoDB Secret
      #   run: |
      #     kubectl create secret generic mongodb-secret --from-literal=MONGO_USERNAME=${{ secrets.MONGO_USERNAME }} --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}

      - name: Deploy to Development Environment
        run: |
          kubectl apply -f Kubernetes/development/

  deploy-on-EC2-instance:
    runs-on: ubuntu-latest
    needs: build-test-and-push

    steps:
      - name: Display Deployment Context Information
        run: |
          echo "Deploying to EC2 host: ${{ secrets.EC2_HOST }} as user: ${{ secrets.EC2_USERNAME }}, Environment: ${{ github.event.inputs.deploy_env || 'production' }}"
          echo "Image Name: ${{ env.IMAGE_NAME }}"
          echo "Image Tag: ${{ env.IMAGE_TAG }}"

      - name: Deploy on EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

            # Stop and remove the existing container if it exists
            sudo docker stop NodeJs-Container || true
            sudo docker rm NodeJs-Container || true

            sudo docker run -d --name NodeJs-Container --restart always -p 3001:3001 ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
