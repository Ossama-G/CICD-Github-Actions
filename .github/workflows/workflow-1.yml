name: Oussama CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    paths-ignore:
      - "README.md"
    branches: ["main"]

  workflow_dispatch:
    inputs:
      image_name:
        description: "Docker image name"
        required: false
        default: ""
      image_tag:
        description: "Tag for the Docker image"
        required: false
        default: "latest"
      deploy_env:
        description: "Deployment environment"
        required: false
        default: ""

env:
  COMMIT_HASH: ${{ github.sha }}
  IMAGE_NAME: ${{ github.event.inputs.image_name || vars.IMAGE_NAME }}
  IMAGE_TAG: ${{ github.event.inputs.image_tag || 'latest' }}

jobs:
  build-test-and-push:
    permissions:
      packages: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Display GitHub Context Information
        run: |
          echo "Repository: ${{ github.repository }}, Actor: ${{ github.actor }}, Branch: ${{ github.ref_name }}"

      - name: Display Runner Information
        run: |
          echo "Running on OS: ${{ runner.os }} with ${{ runner.arch }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          echo "Building Docker image with name: ${{ env.IMAGE_NAME }} and tag: ${{ env.IMAGE_TAG }}"

          # Build the Docker image with commit hash tag
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_HASH }} .

      - name: Test Docker Image
        run: |
          echo "Running tests on Docker image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_HASH }}"
          docker run -d --name test_container -p 3001:3001 ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_HASH }}
          docker ps | grep test_container

          # Checks to validate the container
          sleep 20
          docker logs test_container
          curl http://localhost:3001

          docker stop test_container
          docker rm test_container

      - name: Push Docker Image to Container Registry
        run: |
          echo "Pushing Docker image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_HASH }}"

          # Push the Docker image with commit hash tag
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_HASH }}

          # Build and push with specified or default tag
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_HASH }}

  deploy-on-EC2-instance:
    runs-on: ubuntu-latest
    needs: build-test-and-push

    steps:
      - name: Display Deployment Context Information
        run: |
          echo "Deploying to EC2 host: ${{ secrets.EC2_HOST }} as user: ${{ secrets.EC2_USERNAME }}, Environment: ${{ github.event.inputs.deploy_env || 'production' }}"
          echo "Image Name: ${{ env.IMAGE_NAME }}"
          echo "Image Tag: ${{ env.IMAGE_TAG }}"

      - name: Deploy on EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

            # Stop and remove the existing container if it exists
            sudo docker stop NodeJs-Container || true
            sudo docker rm NodeJs-Container || true

            sudo docker run -d --name NodeJs-Container --restart always -p 3001:3001 ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
